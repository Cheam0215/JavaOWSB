/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package OSWB;

import Controllers.InventoryController;
import Entities.PurchaseOrder;
import Entities.User;
import Interface.InventoryManagerPOServices;
import Utility.Remark;
import Utility.Status;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;



/**
 *
 * @author chieu
 */
public class IM_Update_Stock extends javax.swing.JFrame {
    
    private DefaultTableModel model;
    private final User currentUser;
    private final InventoryController inventoryController;
    private final InventoryManagerPOServices poServices;
        

    /**
     * Creates new form IM_Update_Stock
     */
    
    private final String[] columnNames = {
        "PO ID", "PR ID", "Raised By", "Item Code", "Quantity", "Supplier Code", "Required Date", "Requested Date", "Status", "Payment Amount", "Remarks"
    };
    private final JFrame previousScreen;

    /**
     * Creates new form IM_Update_Stock_Level
     * @param currentUser
     * @param inventoryController
     * @param poServices
     * @param previousScreen
     */
    
    public IM_Update_Stock(User currentUser, InventoryController inventoryController, InventoryManagerPOServices poServices, JFrame previousScreen) {
        this.currentUser = currentUser;
        this.inventoryController = inventoryController;
        this.poServices = poServices;
        this.previousScreen = previousScreen;
        initComponents();
        setupTable();
        loadApprovedPOs();
        
    }    
    
    private void setupTable() {
        // Initialize table model with correct columns
        model = new DefaultTableModel(columnNames, 0);
        tablePo.setModel(model);
    }
    
    private void loadApprovedPOs() {
        // Clear existing table data
        model.setRowCount(0);

        // Read POs from file
        List<PurchaseOrder> poList = poServices.getAllPOs();

        // Add only APPROVED POs to the table
        for (PurchaseOrder po : poList) {
            if (po.getStatus().equals(Status.APPROVED)) {
                model.addRow(new Object[] {
                    po.getPoId(),
                    po.getPrId(),
                    po.getRaisedBy(),
                    po.getItemCode(),
                    String.valueOf(po.getQuantity()),
                    po.getSupplierCode(),
                    po.getRequiredDate(),
                    po.getRequestedDate(),
                    po.getStatus().toString(),
                    String.valueOf(po.getPaymentAmount()),
                    po.getRemark().toString()
                });
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablePo = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnReject = new javax.swing.JButton();
        btnApprove = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        tablePo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablePo);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("Update Stock Level");

        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        btnApprove.setText("Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        jMenu5.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Home");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Logout");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem2);

        jMenuBar1.add(jMenu5);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1442, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(557, 557, 557))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jLabel1)
                .addGap(52, 52, 52)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReject)
                    .addComponent(btnApprove))
                .addGap(53, 53, 53))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // Get selected row
        int selectedRow = tablePo.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a PO to approve.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get itemCode and quantity from selected row
        String itemCode = (String) model.getValueAt(selectedRow, 3); // Item Code (column 3)
        String quantityStr = String.valueOf(model.getValueAt(selectedRow, 4)); // Quantity (column 4) 
        int quantity;
        try {
            quantity = Integer.parseInt(quantityStr);
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid quantity format: " + quantityStr, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Update stock using InventoryManager
            inventoryController.receiveStockAndUpdateInventory(itemCode, quantity, currentUser);
            javax.swing.JOptionPane.showMessageDialog(this, "Stock updated successfully!", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            // Refresh table to show only remaining APPROVED POs
            loadApprovedPOs();
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Failed to update stock: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        int selectedRow = tablePo.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a PO to reject.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String poId = (String) model.getValueAt(selectedRow, 0);

          // Limit combo box to STOCK_INVALID and INVALID_AMOUNT
        Remark[] allowedReasons = {Remark.STOCK_INVALID, Remark.INVALID_AMOUNT};
        JComboBox<Remark> reasonComboBox = new JComboBox<>(allowedReasons);
        JPanel panel = new JPanel();
        panel.add(new JLabel("Select rejection reason:"));
        panel.add(reasonComboBox);

       int result = JOptionPane.showConfirmDialog(this, panel, "Reject Purchase Order",
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            try {
                Remark rejectionReason = (Remark) reasonComboBox.getSelectedItem();
                poServices.rejectPurchaseOrder(poId, rejectionReason); 
                JOptionPane.showMessageDialog(this, "PO " + poId + " rejected successfully.",
                    "Success", JOptionPane.INFORMATION_MESSAGE);
                loadApprovedPOs();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Failed to reject PO: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRejectActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (this.previousScreen != null) {
            this.previousScreen.setVisible(true); // Just make the existing one visible
        } else {
            // Fallback or error: Should not happen if previousScreen is always passed
            JOptionPane.showMessageDialog(this, "Error: Previous screen reference lost.", "Navigation Error", JOptionPane.ERROR_MESSAGE);
            // Optionally, recreate Login if truly lost
            // new Login().setVisible(true);
        }
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        Login login = new Login();
        login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnReject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablePo;
    // End of variables declaration//GEN-END:variables
}
