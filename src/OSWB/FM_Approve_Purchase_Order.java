/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package OSWB;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import Entities.PurchaseOrder;
import Entities.FinanceManager;
import Utility.Status;
/**
 *
 * @author Maxcm
 */
public class FM_Approve_Purchase_Order extends javax.swing.JFrame {
    private final FinanceManager financeManager;
    private DefaultTableModel tableModel;

    /**
     * Creates new form FM_Approve_Purchase_Order
     */
    public FM_Approve_Purchase_Order(FinanceManager financeManager) {
        this.financeManager = financeManager;
        // Initialize tableModel before initComponents
        tableModel = new DefaultTableModel(
            new Object[][] {},
            new String[] {
                "PO ID", "PR ID", "Raised By", "Item Code", "Supplier Code", "Quantity", 
                "Requested Date", "Required Date", "Payment Amount", "Status", "Remark"
            }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make table non-editable
            }
        };
        initComponents();
        populateTable();
        setupTableSelection();
    }

    /**
     * Populates the table with Purchase Orders, sorted by requestedDate (latest first).
     */
    private void populateTable() {
        List<PurchaseOrder> poList = financeManager.getPurchaseOrders();
        System.out.println("POs received: " + poList.size());

        // Sort by requestedDate (latest first)
        Collections.sort(poList, new Comparator<PurchaseOrder>() {
            private final SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");

            @Override
            public int compare(PurchaseOrder po1, PurchaseOrder po2) {
                try {
                    Date date1 = dateFormat.parse(po1.getRequestedDate());
                    Date date2 = dateFormat.parse(po2.getRequestedDate());
                    return date2.compareTo(date1); // Latest first
                } catch (ParseException e) {
                    System.err.println("Date parse error: " + po1.getRequestedDate() + " or " + po2.getRequestedDate());
                    return 0;
                }
            }
        });

        // Clear existing table data
        tableModel.setRowCount(0);

        // Populate table
        int rowCount = 0;
        for (PurchaseOrder po : poList) {
            if (po != null) {
                tableModel.addRow(new Object[]{
                    po.getPoId(),
                    po.getPrId(),
                    po.getRaisedBy(),
                    po.getItemCode(),
                    po.getSupplierCode(),
                    po.getQuantity(),
                    po.getRequestedDate(),
                    po.getRequiredDate(),
                    po.getPaymentAmount(),
                    po.getStatus(),
                    po.getRemark()
                });
                rowCount++;
            }
        }
        System.out.println("Rows added to table: " + rowCount);
        tableModel.fireTableDataChanged(); // Notify table of data changes
        System.out.println("Table model row count after update: " + tableModel.getRowCount());
        jTable1.repaint(); // Force table repaint
    }

    /**
     * Sets up table selection to allow only PENDING POs.
     */
    private void setupTableSelection() {
        jTable1.getSelectionModel().addListSelectionListener(event -> {
            int selectedRow = jTable1.getSelectedRow();
            if (selectedRow >= 0) {
                String status = tableModel.getValueAt(selectedRow, 9).toString();
                if (!status.equals(Status.PENDING.toString())) {
                    jTable1.clearSelection();
                    JOptionPane.showMessageDialog(this, "Only PENDING Purchase Orders can be selected.", 
                        "Invalid Selection", JOptionPane.WARNING_MESSAGE);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        ApprovePOBtn = new javax.swing.JButton();
        RejectPOBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(tableModel);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 36)); // NOI18N
        jLabel1.setText("Purchase Order List");

        ApprovePOBtn.setText("Approve");
        ApprovePOBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApprovePOBtnActionPerformed(evt);
            }
        });

        RejectPOBtn.setText("Reject");
        RejectPOBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RejectPOBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(971, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ApprovePOBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RejectPOBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(56, 56, 56))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(ApprovePOBtn)
                        .addGap(69, 69, 69)
                        .addComponent(RejectPOBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>                        

    private void ApprovePOBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a PENDING Purchase Order.", 
                "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String poId = tableModel.getValueAt(selectedRow, 0).toString();
        int currentQuantity = Integer.parseInt(tableModel.getValueAt(selectedRow, 5).toString());
        String currentSupplierCode = tableModel.getValueAt(selectedRow, 4).toString();

        // Prompt for new quantity
        String quantityInput = JOptionPane.showInputDialog(this, 
            "Enter new quantity (leave blank to keep " + currentQuantity + "):", currentQuantity);
        int newQuantity = currentQuantity;
        if (quantityInput != null && !quantityInput.trim().isEmpty()) {
            try {
                newQuantity = Integer.parseInt(quantityInput);
                if (newQuantity < 0) {
                    JOptionPane.showMessageDialog(this, "Quantity cannot be negative.", 
                        "Invalid Input", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid quantity format.", 
                    "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Prompt for new supplier code
        String newSupplierCode = JOptionPane.showInputDialog(this, 
            "Enter new supplier code (leave blank to keep " + currentSupplierCode + "):", currentSupplierCode);
        if (newSupplierCode != null && newSupplierCode.trim().isEmpty()) {
            newSupplierCode = currentSupplierCode;
        }

        try {
            String result = financeManager.approvePurchaseOrder(poId, newQuantity, newSupplierCode);
            JOptionPane.showMessageDialog(this, result, "Approval Result", JOptionPane.INFORMATION_MESSAGE);
            populateTable(); // Refresh table
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                            

    private void RejectPOBtnActionPerformed(java.awt.event.ActionEvent evt) {                                            
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a PENDING Purchase Order.", 
                "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String poId = tableModel.getValueAt(selectedRow, 0).toString();
        try {
            String result = financeManager.rejectPurchaseOrder(poId);
            JOptionPane.showMessageDialog(this, result, "Rejection Result", JOptionPane.INFORMATION_MESSAGE);
            populateTable(); // Refresh table
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                              

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FM_Approve_Purchase_Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FM_Approve_Purchase_Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FM_Approve_Purchase_Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FM_Approve_Purchase_Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FinanceManager fm = new FinanceManager("FM001", "finance", "password");
                new FM_Approve_Purchase_Order(fm).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApprovePOBtn;
    private javax.swing.JButton RejectPOBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
