/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package OSWB;

import Entities.InventoryManager;
import Entities.PurchaseOrder;
import Utility.FileManager;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.function.Function;
<<<<<<< Updated upstream
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
=======
>>>>>>> Stashed changes

/**
 *
 * @author chieu
 */
public class IM_Update_Stock_Level extends javax.swing.JFrame {
    private DefaultTableModel model;
    private InventoryManager inventoryManager;
    private FileManager fileManager;
        
        
 private final String[] columnNames = {
<<<<<<< Updated upstream
        "PO ID", "PR ID", "Raised By", "Item Code", "Quantity", "Supplier Code", "Status", "Payment Amount, Remarks"
=======
        "PO ID", "PR ID", "Raised By", "Item Code", "Quantity", "Supplier Code", "Status", "Payment Amount"
>>>>>>> Stashed changes
    };
    /**
     * Creates new form IM_Update_Stock_Level
     */
    
    public IM_Update_Stock_Level(InventoryManager inventoryManager) {
        this.inventoryManager = inventoryManager;
<<<<<<< Updated upstream
        this.fileManager = inventoryManager.getFileManager();
=======
        this.fileManager = inventoryManager.getFileManager(); // Initialize fileManager
>>>>>>> Stashed changes
        initComponents();
        setupTable();
        loadApprovedPOs();
    }
    
    public IM_Update_Stock_Level() {
        initComponents();
    }
    
    private void setupTable() {
        // Initialize table model with correct columns
        model = new DefaultTableModel(columnNames, 0);
        tablePo.setModel(model);
    }
    
     private void loadApprovedPOs() {
        // Clear existing table data
        model.setRowCount(0);

        // Read POs from file
        List<PurchaseOrder> poList = fileManager.readFile(
            fileManager.getPoFilePath(),
            line -> {
                String[] data = line.split(",");
                return new PurchaseOrder(data[0], data[1], data[2], 
<<<<<<< Updated upstream
                    data[3], Integer.parseInt(data[4]), data[5], data[6], Double.parseDouble(data[7]), data[8]);
=======
                    data[3], Integer.parseInt(data[4]), data[5], data[6], Double.parseDouble(data[7]));
>>>>>>> Stashed changes
            }
        );

        // Add only APPROVED POs to the table
        for (PurchaseOrder po : poList) {
            if (po.getStatus().equals("APPROVED")) {
                model.addRow(new Object[] {
                    po.getPoId(),
                    po.getPrId(),
                    po.getRaisedBy(),
                    po.getItemCode(),
                    po.getQuantity(),
                    po.getSupplierCode(),
                    po.getStatus(),
<<<<<<< Updated upstream
                    po.getPaymentAmount(),
                    po.getRemark()
=======
                    po.getPaymentAmount()
>>>>>>> Stashed changes
                });
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePo = new javax.swing.JTable();
        btnApproved = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
<<<<<<< Updated upstream
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
=======
>>>>>>> Stashed changes

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel1.setText("Update Stock Level");

        tablePo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablePo);

        btnApproved.setText("Approved");
        btnApproved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApprovedActionPerformed(evt);
            }
        });

        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

<<<<<<< Updated upstream
        jMenu5.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Home");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Logout");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem2);

        jMenuBar1.add(jMenu5);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

=======
>>>>>>> Stashed changes
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
<<<<<<< Updated upstream
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 913, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnApproved, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(376, 376, 376)
=======
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnApproved, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 857, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(84, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(350, 350, 350)
>>>>>>> Stashed changes
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
<<<<<<< Updated upstream
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReject)
                    .addComponent(btnApproved))
                .addContainerGap())
=======
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReject)
                    .addComponent(btnApproved))
                .addContainerGap(14, Short.MAX_VALUE))
>>>>>>> Stashed changes
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
<<<<<<< Updated upstream
        int selectedRow = tablePo.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a PO to reject.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String poId = (String) model.getValueAt(selectedRow, 0);

        // Create combo box for rejection reasons
        String[] reasons = {"Invalid Amount", "Others"};
        JComboBox<String> reasonComboBox = new JComboBox<>(reasons);
        JPanel panel = new JPanel();
        panel.add(new JLabel("Select rejection reason:"));
        panel.add(reasonComboBox);

        int result = JOptionPane.showConfirmDialog(this, panel, "Reject Purchase Order", 
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            String rejectionReason = (String) reasonComboBox.getSelectedItem();
            try {
                inventoryManager.rejectPurchaseOrder(poId, rejectionReason);
                JOptionPane.showMessageDialog(this, "PO " + poId + " rejected successfully.", 
                    "Success", JOptionPane.INFORMATION_MESSAGE);
                loadApprovedPOs();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Failed to reject PO: " + e.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
=======
        
>>>>>>> Stashed changes
    }//GEN-LAST:event_btnRejectActionPerformed

    private void btnApprovedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApprovedActionPerformed
         // Get selected row
        int selectedRow = tablePo.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a PO to approve.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get itemCode and quantity from selected row
        String itemCode = (String) model.getValueAt(selectedRow, 3); // Item Code (column 3)
        int quantity = ((Number) model.getValueAt(selectedRow, 4)).intValue(); // Quantity (column 4

        try {
            // Update stock using InventoryManager
            inventoryManager.updateStock(itemCode, quantity);
<<<<<<< Updated upstream
            javax.swing.JOptionPane.showMessageDialog(this, "Stock updated successfully!", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);            
=======
            javax.swing.JOptionPane.showMessageDialog(this, "Stock updated successfully!", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
>>>>>>> Stashed changes
            // Refresh table to show only remaining APPROVED POs
            loadApprovedPOs();
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Failed to update stock: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnApprovedActionPerformed
<<<<<<< Updated upstream

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        IM_MAIN mainPage = new IM_MAIN();
        mainPage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

    }//GEN-LAST:event_jMenuItem2ActionPerformed
=======
>>>>>>> Stashed changes
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IM_Update_Stock_Level.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IM_Update_Stock_Level.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IM_Update_Stock_Level.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IM_Update_Stock_Level.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IM_Update_Stock_Level().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApproved;
    private javax.swing.JButton btnReject;
    private javax.swing.JLabel jLabel1;
<<<<<<< Updated upstream
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
=======
>>>>>>> Stashed changes
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablePo;
    // End of variables declaration//GEN-END:variables
}
